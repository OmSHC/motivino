# Multi-stage Dockerfile for better disk usage
# Stage 1: Build frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --legacy-peer-deps

# Copy source code
COPY frontend/ .

# Build frontend
RUN npm run build

# Stage 2: Python backend
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY motivation_news/ ./motivation_news/
COPY apps/ ./apps/
COPY manage.py .
COPY db.sqlite3* ./

# Copy built frontend from Stage 1
COPY --from=frontend-builder /app/frontend/build ./static/

# Create directories for logs and static files
RUN mkdir -p /app/logs /app/staticfiles /app/media

# Create non-root user
RUN useradd --create-home --shell /bin/bash django
RUN chown -R django:django /app
USER django

# Expose port
EXPOSE 8000

# Run the application
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--chdir", "/app", "motivation_news.wsgi:application", "--log-file", "-"]
