#!/bin/bash

# Enhanced script for development, production, and testing configurations

show_usage() {
    echo "Usage: $0 [dev|prod|test|backend|frontend|status|logs|clean]"
    echo ""
    echo "Commands:"
    echo "  dev      - Development environment (HTTP, hot reload)"
    echo "  prod     - Production environment (HTTPS, optimized)"
    echo "  test     - Show testing commands for isolated development"
    echo "  backend  - Start only backend + Redis (for API testing)"
    echo "  frontend - Start only frontend + Nginx (for UI testing)"
    echo "  status   - Show current container status"
    echo "  logs     - Show container logs"
    echo "  clean    - Clean up Docker resources"
    echo ""
    echo "Available Docker Compose files:"
    echo "  📁 docker-compose.yml           - Development (4 containers)"
    echo "  📁 docker-compose.prod.yml      - Production (4 containers)"
    echo "  📁 docker-compose.gcp.yml       - GCP deployment (3 containers)"
    echo "  📁 docker-compose.simple.yml    - Simple dev (2 containers)"
    echo "  📁 docker-compose.two-containers.yml - Combined app (2 containers)"
    echo ""
    echo "Database: SQLite (no PostgreSQL needed!)"
}

if [ "$1" = "dev" ]; then
    echo "🔧 DEVELOPMENT Environment Setup"
    echo "=================================="
    echo "   ✅ SQLite database (no PostgreSQL needed)"
    echo "   ✅ Redis for caching and sessions"
    echo "   ✅ Django backend + React frontend"
    echo "   ✅ Hot reload for frontend development"
    echo ""
    echo "📁 Using: docker-compose.yml"
    echo "🌐 Frontend: http://localhost (nginx serves built React app)"
    echo "🔗 Backend API: http://localhost/api"
    echo "👤 Admin: http://localhost/admin"
    echo ""
    echo "🚀 Quick start commands:"
    echo "   # Full development environment"
    echo "   docker-compose up --build"
    echo ""
    echo "   # Frontend development (hot reload)"
    echo "   cd frontend && npm start"
    echo "   # Then visit: http://localhost:3000"
    echo ""
    echo "💡 Tip: Use './switch-env.sh test' for isolated testing options"

elif [ "$1" = "prod" ]; then
    echo "🚀 PRODUCTION Environment Setup"
    echo "================================="
    echo "   ✅ SQLite database (file-based)"
    echo "   ✅ Redis for caching and sessions"
    echo "   ✅ Optimized for GCP deployment"
    echo "   ✅ HTTPS with SSL certificates"
    echo ""
    echo "📁 Using: docker-compose.prod.yml"
    echo "🌐 Access: https://your-domain.com"
    echo "🔗 Backend API: https://your-domain.com/api"
    echo "👤 Admin: https://your-domain.com/admin"
    echo ""
    echo "🚀 Deployment commands:"
    echo "   # Full production deployment"
    echo "   docker-compose -f docker-compose.prod.yml up --build -d"
    echo ""
    echo "   # Check deployment status"
    echo "   docker-compose -f docker-compose.prod.yml ps"
    echo ""
    echo "   # View logs"
    echo "   docker-compose -f docker-compose.prod.yml logs -f"
    echo ""
    echo "📦 Alternative GCP deployment:"
    echo "   docker-compose -f docker-compose.gcp.yml pull"
    echo "   docker-compose -f docker-compose.gcp.yml up -d"
    echo ""
    echo "⚡ Alternative 2-container deployment:"
    echo "   docker-compose -f docker-compose.two-containers.yml up --build -d"

elif [ "$1" = "test" ]; then
    echo "🧪 ISOLATED TESTING Environment"
    echo "==============================="
    echo "Test individual services without full stack dependencies"
    echo ""
    echo "🔬 Testing Commands:"
    echo ""
    echo "   # Test backend API only (with Redis)"
    echo "   docker-compose up backend redis"
    echo "   # API available at: http://localhost:8000"
    echo "   # Test endpoints: http://localhost:8000/api/"
    echo ""
    echo "   # Test frontend UI only (with Nginx)"
    echo "   docker-compose up frontend nginx"
    echo "   # UI available at: http://localhost"
    echo "   # API calls will fail (expected for isolated testing)"
    echo ""
    echo "   # Full integration testing"
    echo "   docker-compose up --build"
    echo ""
    echo "   # Test with mock data"
    echo "   # Backend: Use Postman/Insomnia to test API endpoints"
    echo "   # Frontend: UI renders, API calls show network errors"
    echo ""
    echo "🎯 Testing Strategy:"
    echo "   1. Test backend isolated (API logic, database)"
    echo "   2. Test frontend isolated (UI rendering, user experience)"
    echo "   3. Test integration (full application flow)"
    echo ""
    echo "💡 Pro tip: Use different browser tabs for isolated testing"

elif [ "$1" = "backend" ]; then
    echo "🐍 Starting BACKEND ONLY (with Redis)"
    echo "======================================"
    echo "   ✅ Backend API server"
    echo "   ✅ Redis cache"
    echo "   ❌ No frontend (for API testing only)"
    echo ""
    echo "🚀 Command:"
    echo "   docker-compose up backend redis"
    echo ""
    echo "🌐 Access points:"
    echo "   API: http://localhost:8000/api/"
    echo "   Admin: http://localhost:8000/admin/"
    echo "   Health: http://localhost:8000/api/core/health/"
    echo ""
    docker-compose up backend redis

elif [ "$1" = "frontend" ]; then
    echo "⚛️ Starting FRONTEND ONLY (with Nginx)"
    echo "======================================"
    echo "   ✅ React frontend"
    echo "   ✅ Nginx web server"
    echo "   ❌ No backend (for UI testing only)"
    echo ""
    echo "🚀 Command:"
    echo "   docker-compose up frontend nginx"
    echo ""
    echo "🌐 Access points:"
    echo "   UI: http://localhost"
    echo "   # API calls will show network errors (expected)"
    echo ""
    docker-compose up frontend nginx

elif [ "$1" = "status" ]; then
    echo "📊 Container Status"
    echo "==================="
    echo ""
    echo "🔍 Current running containers:"
    docker-compose ps 2>/dev/null || echo "No containers running"
    echo ""
    echo "📈 Resource usage:"
    docker stats --no-stream 2>/dev/null || echo "Unable to get stats"
    echo ""
    echo "💾 Docker system usage:"
    docker system df 2>/dev/null || echo "Unable to get system info"

elif [ "$1" = "logs" ]; then
    echo "📝 Container Logs"
    echo "================="
    echo ""
    echo "Choose a service to view logs:"
    echo "  docker-compose logs backend"
    echo "  docker-compose logs frontend"
    echo "  docker-compose logs redis"
    echo "  docker-compose logs nginx"
    echo ""
    echo "Or view all logs:"
    echo "  docker-compose logs -f"
    echo ""
    echo "Recent logs from all services:"
    docker-compose logs --tail=20 2>/dev/null || echo "No containers running"

elif [ "$1" = "clean" ]; then
    echo "🧹 Docker Cleanup"
    echo "================="
    echo ""
    echo "This will remove:"
    echo "  - Stopped containers"
    echo "  - Unused images"
    echo "  - Build cache"
    echo "  - Unused volumes"
    echo ""
    read -p "Are you sure you want to clean Docker resources? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "🧹 Cleaning Docker resources..."
        docker-compose down 2>/dev/null || true
        docker system prune -f
        docker volume prune -f
        docker builder prune -a -f
        echo "✅ Cleanup completed!"
    else
        echo "❌ Cleanup cancelled."
    fi

else
    show_usage
fi
